schema {
  query: Query
  mutation: Mutation
  subscription: Subscription
}

"The node interface is implemented by entities that have a global unique identifier."
interface Node {
  id: ID!
}

type Account implements Node {
  id: ID!
  "Transform the given signed amount to an absolute debit value or zero"
  debitAmount("The signed amount representing the amount" amount: Decimal!): Decimal!
  "Transform the given signed amount to an absolute credit value or zero"
  creditAmount("The signed amount representing the amount" amount: Decimal!): Decimal!
  "Converts a double entry value to a"
  signedAmount(value: DoubleEntryValueInput!): Decimal!
  "Recives a signed int and converts it to a DoubleEntryValue depending on the account type"
  convertToDoubleEntryValue(amount: Decimal!): DoubleEntryValue!
  "Identifying code of the account"
  code: String!
  "Name of the account"
  name: String!
  "Parent account"
  parent: Account
  parentId: Int
  "Indicates that this account is in fact, a category ( and therefore, can have children )"
  isCategory: Boolean!
  "Child accounts"
  children: [Account!]
  "Indica que la cuenta esta activa y puede ser utilizada en asientos contables"
  isActive: Boolean!
  "Tipo de la cuenta contable"
  type: AccountClass!
}

"A connection to a list of items."
type AccountConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AccountEdge!]
  "A flattened list of the nodes."
  nodes: [Account!]
  totalCount: Int!
}

"An edge in a connection."
type AccountEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Account!
}

type AddAccountPayload {
  account: Account!
  errors: [UserError!]
}

type AddSessionPayload {
  session: Session
  errors: [UserError!]
}

type AddSpeakerPayload {
  speaker: Speaker
  errors: [UserError!]
}

type AddTrackPayload {
  track: Track
  errors: [UserError!]
}

type Attendee implements Node {
  id: ID!
  sessions: [Session]
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String
}

"A connection to a list of items."
type AttendeeConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [AttendeeEdge!]
  "A flattened list of the nodes."
  nodes: [Attendee!]
}

"An edge in a connection."
type AttendeeEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Attendee!
}

type CheckInAttendeePayload {
  session: Session
  attendee: Attendee
  errors: [UserError!]
}

type DoubleEntryValue {
  "Adds the two values. The result is returned in a new DoubleEntryValue."
  add(value: DoubleEntryValueInput!): DoubleEntryValue!
  "Returns a signed decimal that the value"
  asAmount(class: AccountClass!): Decimal!
  debit: Decimal!
  credit: Decimal!
}

type JournalEntry implements Node {
  id: ID!
  total: Decimal!
  "Incremental integer that identifies on journal entry. It is set when a ledger entry has been consolidated\nand can't be changed."
  sequenceId: Int
  "JournalEntry date"
  date: DateTime!
  "JournalEntry last edited"
  lastEdit: DateTime!
  "Has the journal entry been printed ?"
  consolidated: Boolean!
  "Journal entries."
  journalEntryLines: [JournalEntryLine!]!
  transaction: Transaction
  transactionId: Int
  detail: String!
}

"A connection to a list of items."
type JournalEntryConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [JournalEntryEdge!]
  "A flattened list of the nodes."
  nodes: [JournalEntry!]
}

"An edge in a connection."
type JournalEntryEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: JournalEntry!
}

type JournalEntryLine {
  lineNumber: Int!
  "Ledger entry to which this line belongs"
  journalEntry: JournalEntry
  journalEntryId: Int!
  "Line account"
  account: Account!
  accountId: Int!
  "Signed decimal quantity for storing purposes. Should be accessed through Debit or Credit methods accordingly\nand assign through SetAmount()."
  amount: Decimal!
  detail: String!
  value: DoubleEntryValue!
}

type ModifySpeakerPayload {
  speaker: Speaker
  errors: [UserError!]
}

type Mutation {
  registerAttendee(input: RegisterAttendeeInput!): RegisterAttendeePayload!
  checkInAttendee(input: CheckInAttendeeInput!): CheckInAttendeePayload!
  addSession(input: AddSessionInput!): AddSessionPayload!
  scheduleSession(input: ScheduleSessionInput!): ScheduleSessionPayload!
  renameSession(input: RenameSessionInput!): RenameSessionPayload!
  addSpeaker(input: AddSpeakerInput!): AddSpeakerPayload!
  modifySpeaker(input: ModifySpeakerInput!): ModifySpeakerPayload!
  addAccount(input: AddAccountInput!): AddAccountPayload!
  addTrack(input: AddTrackInput!): AddTrackPayload!
  renameTrack(input: RenameTrackInput!): RenameTrackPayload!
}

"Information about pagination in a connection."
type PageInfo {
  "Indicates whether more edges exist following the set defined by the clients arguments."
  hasNextPage: Boolean!
  "Indicates whether more edges exist prior the set defined by the clients arguments."
  hasPreviousPage: Boolean!
  "When paginating backwards, the cursor to continue."
  startCursor: String
  "When paginating forwards, the cursor to continue."
  endCursor: String
}

type Query {
  node(id: ID!): Node
  "Gets all attendees of this conference."
  attendees(first: Int after: String last: Int before: String): AttendeeConnection
  "Gets an attendee by its identifier."
  attendeeById("The attendee identifier." id: ID!): Attendee!
  attendeesById(ids: [ID!]!): [Attendee!]!
  sessions(first: Int after: String last: Int before: String where: SessionFilterInput order: [SessionSortInput!]): SessionConnection
  sessionById(id: ID!): Session!
  sessionsById(ids: [ID!]!): [Track!]!
  speakers(first: Int after: String last: Int before: String): SpeakerConnection
  speakerById(id: ID!): Speaker!
  speakersById(ids: [ID!]!): [Speaker!]!
  tracks(first: Int after: String last: Int before: String): TrackConnection
  trackByName(name: String!): Track!
  trackByNames(names: [String!]!): [Track!]!
  trackById(id: ID!): Track!
  accounts(first: Int after: String last: Int before: String): AccountConnection
  accountById(id: ID!): Account!
  accountsById(ids: [ID!]!): [Account!]!
  journalEntries(first: Int after: String last: Int before: String): JournalEntryConnection
}

type RegisterAttendeePayload {
  attendee: Attendee
  errors: [UserError!]
}

type RenameSessionPayload {
  session: Session
  errors: [UserError!]
}

type RenameTrackPayload {
  track: Track
  errors: [UserError!]
}

type ScheduleSessionPayload {
  track: Track
  speakers: [Speaker!]
  session: Session
  errors: [UserError!]
}

type Session implements Node {
  id: ID!
  speakers: [Speaker]
  attendees: [Attendee]
  track: Track
  trackId: ID
  title: String!
  abstract: String
  startTime: DateTime
  endTime: DateTime
  duration: TimeSpan!
}

type SessionAttendeeCheckIn {
  checkInCount: Int!
  attendee: Attendee!
  session: Session!
  attendeeId: ID!
  sessionId: ID!
}

"A connection to a list of items."
type SessionConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SessionEdge!]
  "A flattened list of the nodes."
  nodes: [Session!]
}

"An edge in a connection."
type SessionEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Session!
}

type Speaker implements Node {
  id: ID!
  sessions: [Session]
  name: String!
  bio: String
  webSite: String
}

"A connection to a list of items."
type SpeakerConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [SpeakerEdge!]
  "A flattened list of the nodes."
  nodes: [Speaker!]
}

"An edge in a connection."
type SpeakerEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Speaker!
}

type Subscription {
  onAttendeeCheckedIn(sessionId: ID!): SessionAttendeeCheckIn!
  onSessionScheduled: Session!
}

type Track implements Node {
  id: ID!
  sessions(first: Int after: String last: Int before: String): SessionConnection
  name: String!
}

"A connection to a list of items."
type TrackConnection {
  "Information to aid in pagination."
  pageInfo: PageInfo!
  "A list of edges."
  edges: [TrackEdge!]
  "A flattened list of the nodes."
  nodes: [Track!]
}

"An edge in a connection."
type TrackEdge {
  "A cursor for use in pagination."
  cursor: String!
  "The item at the end of the edge."
  node: Track!
}

type Transaction {
  id: Int!
  code: String!
  transactionDate: DateTime!
  journalEntries: [JournalEntry!]
}

type UserError {
  message: String!
  code: String!
}

input AddAccountInput {
  name: String!
  code: String!
  type: AccountClass!
  parentId: ID
}

input AddSessionInput {
  title: String!
  abstract: String
  speakerIds: [ID!]!
}

input AddSpeakerInput {
  name: String!
  bio: String
  webSite: String
}

input AddTrackInput {
  name: String!
}

input AttendeeFilterInput {
  and: [AttendeeFilterInput!]
  or: [AttendeeFilterInput!]
  id: ComparableInt32OperationFilterInput
  firstName: StringOperationFilterInput
  lastName: StringOperationFilterInput
  userName: StringOperationFilterInput
  emailAddress: StringOperationFilterInput
  sessionsAttendees: ListFilterInputTypeOfSessionAttendeeFilterInput
}

input CheckInAttendeeInput {
  sessionId: ID!
  attendeeId: ID!
}

input ComparableInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int!]
  nin: [Int!]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableNullableOfDateTimeOffsetOperationFilterInput {
  eq: DateTime
  neq: DateTime
  in: [DateTime]
  nin: [DateTime]
  gt: DateTime
  ngt: DateTime
  gte: DateTime
  ngte: DateTime
  lt: DateTime
  nlt: DateTime
  lte: DateTime
  nlte: DateTime
}

input ComparableNullableOfInt32OperationFilterInput {
  eq: Int
  neq: Int
  in: [Int]
  nin: [Int]
  gt: Int
  ngt: Int
  gte: Int
  ngte: Int
  lt: Int
  nlt: Int
  lte: Int
  nlte: Int
}

input ComparableTimeSpanOperationFilterInput {
  eq: TimeSpan
  neq: TimeSpan
  in: [TimeSpan!]
  nin: [TimeSpan!]
  gt: TimeSpan
  ngt: TimeSpan
  gte: TimeSpan
  ngte: TimeSpan
  lt: TimeSpan
  nlt: TimeSpan
  lte: TimeSpan
  nlte: TimeSpan
}

input DoubleEntryValueInput {
  debit: Decimal!
  credit: Decimal!
}

input ListFilterInputTypeOfSessionAttendeeFilterInput {
  all: SessionAttendeeFilterInput
  none: SessionAttendeeFilterInput
  some: SessionAttendeeFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSessionFilterInput {
  all: SessionFilterInput
  none: SessionFilterInput
  some: SessionFilterInput
  any: Boolean
}

input ListFilterInputTypeOfSessionSpeakerFilterInput {
  all: SessionSpeakerFilterInput
  none: SessionSpeakerFilterInput
  some: SessionSpeakerFilterInput
  any: Boolean
}

input ModifySpeakerInput {
  id: ID!
  name: String
  bio: String
  webSite: String
}

input RegisterAttendeeInput {
  firstName: String!
  lastName: String!
  userName: String!
  emailAddress: String!
}

input RenameSessionInput {
  sessionId: ID!
  title: String!
}

input RenameTrackInput {
  id: ID!
  name: String!
}

input ScheduleSessionInput {
  sessionId: ID!
  trackId: ID!
  startTime: DateTime!
  endTime: DateTime!
}

input SessionAttendeeFilterInput {
  and: [SessionAttendeeFilterInput!]
  or: [SessionAttendeeFilterInput!]
  sessionId: ComparableInt32OperationFilterInput
  session: SessionFilterInput
  attendeeId: ComparableInt32OperationFilterInput
  attendee: AttendeeFilterInput
}

input SessionFilterInput {
  and: [SessionFilterInput!]
  or: [SessionFilterInput!]
  id: ComparableInt32OperationFilterInput
  title: StringOperationFilterInput
  abstract: StringOperationFilterInput
  startTime: ComparableNullableOfDateTimeOffsetOperationFilterInput
  endTime: ComparableNullableOfDateTimeOffsetOperationFilterInput
  duration: ComparableTimeSpanOperationFilterInput
  trackId: ComparableNullableOfInt32OperationFilterInput
  sessionSpeakers: ListFilterInputTypeOfSessionSpeakerFilterInput
  sessionAttendees: ListFilterInputTypeOfSessionAttendeeFilterInput
  track: TrackFilterInput
}

input SessionSortInput {
  id: SortEnumType
  title: SortEnumType
  abstract: SortEnumType
  startTime: SortEnumType
  endTime: SortEnumType
  duration: SortEnumType
  trackId: SortEnumType
  track: TrackSortInput
}

input SessionSpeakerFilterInput {
  and: [SessionSpeakerFilterInput!]
  or: [SessionSpeakerFilterInput!]
  sessionId: ComparableInt32OperationFilterInput
  session: SessionFilterInput
  speakerId: ComparableInt32OperationFilterInput
  speaker: SpeakerFilterInput
}

input SpeakerFilterInput {
  and: [SpeakerFilterInput!]
  or: [SpeakerFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  bio: StringOperationFilterInput
  webSite: StringOperationFilterInput
  sessionSpeakers: ListFilterInputTypeOfSessionSpeakerFilterInput
}

input StringOperationFilterInput {
  and: [StringOperationFilterInput!]
  or: [StringOperationFilterInput!]
  eq: String
  neq: String
  contains: String
  ncontains: String
  in: [String]
  nin: [String]
  startsWith: String
  nstartsWith: String
  endsWith: String
  nendsWith: String
}

input TrackFilterInput {
  and: [TrackFilterInput!]
  or: [TrackFilterInput!]
  id: ComparableInt32OperationFilterInput
  name: StringOperationFilterInput
  sessions: ListFilterInputTypeOfSessionFilterInput
}

input TrackSortInput {
  id: SortEnumType
  name: SortEnumType
}

enum AccountClass {
  ASSET
  LIABILITY
  CAPITAL
  REVENUE
  EXPENSES
}

enum SortEnumType {
  ASC
  DESC
}

"The `@defer` directive may be provided for fragment spreads and inline fragments to inform the executor to delay the execution of the current fragment to indicate deprioritization of the current fragment. A query with `@defer` directive will cause the request to potentially return multiple responses, where non-deferred data is delivered in the initial response and data deferred is delivered in a subsequent response. `@include` and `@skip` take precedence over `@defer`."
directive @defer("If this argument label has a value other than null, it will be passed on to the result of this defer directive. This label is intended to give client applications a way to identify to which fragment a deferred result belongs to." label: String "Deferred when true." if: Boolean) on FRAGMENT_SPREAD | INLINE_FRAGMENT

"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions."
directive @specifiedBy("The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types." url: String!) on SCALAR

"The `@stream` directive may be provided for a field of `List` type so that the backend can leverage technology such as asynchronous iterators to provide a partial list in the initial response, and additional list items in subsequent responses. `@include` and `@skip` take precedence over `@stream`."
directive @stream("If this argument label has a value other than null, it will be passed on to the result of this stream directive. This label is intended to give client applications a way to identify to which fragment a streamed result belongs to." label: String "The initial elements that shall be send down to the consumer." initialCount: Int! "Streamed when true." if: Boolean!) on FIELD

"The `DateTime` scalar represents an ISO-8601 compliant date time type."
scalar DateTime @specifiedBy(url: "https:\/\/www.graphql-scalars.com\/date-time")

"The built-in `Decimal` scalar type."
scalar Decimal

"The `TimeSpan` scalar represents an ISO-8601 compliant duration type."
scalar TimeSpan